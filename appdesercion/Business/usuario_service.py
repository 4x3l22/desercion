import logging
import random
from datetime import timedelta
from django.utils.timezone import now
from appdesercion.models import RecuperarContrasena, Usuario
from appdesercion.ulits.email_utils import EmailService

logger = logging.getLogger(__name__)

class UsuarioService:
    @staticmethod
    def solicitar_recuperacion(email: str) -> bool:
        """
        Genera un c√≥digo de recuperaci√≥n y lo env√≠a por correo.
        """
        try:
            usuario = Usuario.objects.get(correo=email)
        except Usuario.DoesNotExist:
            logger.error("‚ùå Usuario no encontrado para recuperaci√≥n: %s", email)
            return False

        # Genera un c√≥digo de recuperaci√≥n aleatorio
        codigo = str(random.randint(100000, 999999))
        expiracion = now() + timedelta(minutes=15)

        # Guarda el c√≥digo en la base de datos
        RecuperarContrasena.objects.create(
            usuario=usuario,
            codigo=codigo,
            expiracion=expiracion,
            usado=False
        )

        # Env√≠a el c√≥digo por correo
        try:
            EmailService.send_password_reset_email(email, codigo)
            logger.info("üìß C√≥digo de recuperaci√≥n enviado a %s", email)
            return True
        except Exception as e:
            logger.error("‚ùå Error al enviar el c√≥digo de recuperaci√≥n a %s: %s", email, str(e))
            return False

    @staticmethod
    def validar_codigo(email: str, codigo: str) -> bool:
        """
        Valida el c√≥digo de recuperaci√≥n.
        """
        try:
            usuario = Usuario.objects.get(correo=email)
            recuperacion = RecuperarContrasena.objects.filter(
                usuario=usuario,
                codigo=codigo,
                usado=False,
                expiracion__gte=now()  # Verifica que el c√≥digo no haya expirado
            ).first()

            if recuperacion:
                # Marca el c√≥digo como usado
                recuperacion.usado = True
                recuperacion.save()
                return True
            else:
                return False
        except Usuario.DoesNotExist:
            logger.error("‚ùå Usuario no encontrado: %s", email)
            return False

    @staticmethod
    def cambiar_contrasena(email: str, nueva_contrasena: str) -> bool:
        """
        Cambia la contrase√±a del usuario.
        """
        try:
            usuario = Usuario.objects.get(correo=email)
            usuario.contrasena = make_password(nueva_contrasena)
            usuario.save()
            return True
        except Usuario.DoesNotExist:
            logger.error("‚ùå Usuario no encontrado: %s", email)
            return False